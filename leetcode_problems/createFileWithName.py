import os

# List of filenames
filenames = [
    "1_Two Sum.py",
    "9_Palindrome Number.py",
    "13_Roman to Integer.py",
    "14_Longest Common Prefix.py",
    "20_Valid Parentheses.py",
    "21_Merge Two Sorted Lists.py",
    "26_Remove Duplicates from Sorted Array.py",
    "27_Remove Element.py",
    "28_Find the Index of the First Occurrence in a String.py",
    "35_Search Insert Position.py",
    "58_Length of Last Word.py",
    "66_Plus One.py",
    "67_Add Binary.py",
    "69_Sqrt(x).py",
    "70_Climbing Stairs.py",
    "83_Remove Duplicates from Sorted List.py",
    "88_Merge Sorted Array.py",
    "94_Binary Tree Inorder Traversal.py",
    "100_Same Tree.py",
    "101_Symmetric Tree.py",
    "104_Maximum Depth of Binary Tree.py",
    "108_Convert Sorted Array to Binary Search Tree.py",
    "110_Balanced Binary Tree.py",
    "111_Minimum Depth of Binary Tree.py",
    "112_Path Sum.py",
    "118_Pascal's Triangle.py",
    "119_Pascal's Triangle II.py",
    "121_Best Time to Buy and Sell Stock.py",
    "125_Valid Palindrome.py",
    "136_Single Number.py",
    "141_Linked List Cycle.py",
    "144_Binary Tree Preorder Traversal.py",
    "145_Binary Tree Postorder Traversal.py",
    "157_Read N Characters Given Read4.py",
    "160_Intersection of Two Linked Lists.py",
    "163_Missing Ranges.py",
    "168_Excel Sheet Column Title.py",
    "169_Majority Element.py",
    "170_Two Sum III - Data structure design.py",
    "171_Excel Sheet Column Number.py",
    "175_Combine Two Tables.py",
    "181_Employees Earning More Than Their Managers.py",
    "182_Duplicate Emails.py",
    "183_Customers Who Never Order.py",
    "190_Reverse Bits.py",
    "191_Number of 1 Bits.py",
    "193_Valid Phone Numbers.py",
    "195_Tenth Line.py",
    "196_Delete Duplicate Emails.py",
    "197_Rising Temperature.py",
    "202_Happy Number.py",
    "203_Remove Linked List Elements.py",
    "205_Isomorphic Strings.py",
    "206_Reverse Linked List.py",
    "217_Contains Duplicate.py",
    "219_Contains Duplicate II.py",
    "222_Count Complete Tree Nodes.py",
    "225_Implement Stack using Queues.py",
    "226_Invert Binary Tree.py",
    "228_Summary Ranges.py",
    "231_Power of Two.py",
    "232_Implement Queue using Stacks.py",
    "234_Palindrome Linked List.py",
    "242_Valid Anagram.py",
    "243_Shortest Word Distance.py",
    "246_Strobogrammatic Number.py",
    "252_Meeting Rooms.py",
    "257_Binary Tree Paths.py",
    "258_Add Digits.py",
    "263_Ugly Number.py",
    "266_Palindrome Permutation.py",
    "268_Missing Number.py",
    "270_Closest Binary Search Tree Value.py",
    "278_First Bad Version.py",
    "283_Move Zeroes.py",
    "290_Word Pattern.py",
    "292_Nim Game.py",
    "293_Flip Game.py",
    "303_Range Sum Query - Immutable.py",
    "326_Power of Three.py",
    "338_Counting Bits.py",
    "342_Power of Four.py",
    "344_Reverse String.py",
    "345_Reverse Vowels of a String.py",
    "346_Moving Average from Data Stream.py",
    "349_Intersection of Two Arrays.py",
    "350_Intersection of Two Arrays II.py",
    "359_Logger Rate Limiter.py",
    "367_Valid Perfect Square.py",
    "374_Guess Number Higher or Lower.py",
    "383_Ransom Note.py",
    "387_First Unique Character in a String.py",
    "389_Find the Difference.py",
    "392_Is Subsequence.py",
    "401_Binary Watch.py",
    "404_Sum of Left Leaves.py",
    "405_Convert a Number to Hexadecimal.py",
    "408_Valid Word Abbreviation.py",
    "409_Longest Palindrome.py",
    "412_Fizz Buzz.py",
    "414_Third Maximum Number.py",
    "415_Add Strings.py",
    "422_Valid Word Square.py",
    "434_Number of Segments in a String.py",
    "441_Arranging Coins.py",
    "448_Find All Numbers Disappeared in an Array.py",
    "455_Assign Cookies.py",
    "459_Repeated Substring Pattern.py",
    "461_Hamming Distance.py",
    "463_Island Perimeter.py",
    "476_Number Complement.py",
    "482_License Key Formatting.py",
    "485_Max Consecutive Ones.py",
    "492_Construct the Rectangle.py",
    "495_Teemo Attacking.py",
    "496_Next Greater Element I.py",
    "500_Keyboard Row.py",
    "501_Find Mode in Binary Search Tree.py",
    "504_Base 7.py",
    "506_Relative Ranks.py",
    "507_Perfect Number.py",
    "509_Fibonacci Number.py",
    "511_Game Play Analysis I.py",
    "512_Game Play Analysis II.py",
    "520_Detect Capital.py",
    "521_Longest Uncommon Subsequence I.py",
    "530_Minimum Absolute Difference in BST.py",
    "541_Reverse String II.py",
    "543_Diameter of Binary Tree.py",
    "551_Student Attendance Record I.py",
    "557_Reverse Words in a String III.py",
    "559_Maximum Depth of N-ary Tree.py",
    "561_Array Partition.py",
    "563_Binary Tree Tilt.py",
    "566_Reshape the Matrix.py",
    "572_Subtree of Another Tree.py",
    "575_Distribute Candies.py",
    "577_Employee Bonus.py",
    "584_Find Customer Referee.py",
    "586_Customer Placing the Largest Number of Orders.py",
    "589_N-ary Tree Preorder Traversal.py",
    "590_N-ary Tree Postorder Traversal.py",
    "594_Longest Harmonious Subsequence.py",
    "595_Big Countries.py",
    "596_Classes With at Least 5 Students.py",
    "597_Friend Requests I Overall Acceptance Rate.py",
    "598_Range Addition II.py",
    "599_Minimum Index Sum of Two Lists.py",
    "603_Consecutive Available Seats.py",
    "604_Design Compressed String Iterator.py",
    "605_Can Place Flowers.py",
    "607_Sales Person.py",
    "610_Triangle Judgement.py",
    "613_Shortest Distance in a Line.py",
    "617_Merge Two Binary Trees.py",
    "619_Biggest Single Number.py",
    "620_Not Boring Movies.py",
    "627_Swap Salary.py",
    "628_Maximum Product of Three Numbers.py",
    "637_Average of Levels in Binary Tree.py",
    "643_Maximum Average Subarray I.py",
    "645_Set Mismatch.py",
    "653_Two Sum IV - Input is a BST.py",
    "657_Robot Return to Origin.py",
    "661_Image Smoother.py",
    "671_Second Minimum Node In a Binary Tree.py",
    "674_Longest Continuous Increasing Subsequence.py",
    "680_Valid Palindrome II.py",
    "682_Baseball Game.py",
    "693_Binary Number with Alternating Bits.py",
    "696_Count Binary Substrings.py",
    "697_Degree of an Array.py",
    "700_Search in a Binary Search Tree.py",
    "703_Kth Largest Element in a Stream.py",
    "704_Binary Search.py",
    "705_Design HashSet.py",
    "706_Design HashMap.py",
    "709_To Lower Case.py",
    "717_1-bit and 2-bit Characters.py",
    "724_Find Pivot Index.py",
    "728_Self Dividing Numbers.py",
    "733_Flood Fill.py",
    "734_Sentence Similarity.py",
    "744_Find Smallest Letter Greater Than Target.py",
    "746_Min Cost Climbing Stairs.py",
    "747_Largest Number At Least Twice of Others.py",
    "748_Shortest Completing Word.py",
    "760_Find Anagram Mappings.py",
    "762_Prime Number of Set Bits in Binary Representation.py",
    "766_Toeplitz Matrix.py",
    "771_Jewels and Stones.py",
    "783_Minimum Distance Between BST Nodes.py",
    "796_Rotate String.py",
    "800_Similar RGB Color.py",
    "804_Unique Morse Code Words.py",
    "806_Number of Lines To Write String.py",
    "812_Largest Triangle Area.py",
    "819_Most Common Word.py",
    "821_Shortest Distance to a Character.py",
    "824_Goat Latin.py",
]

# Directory where files will be created
output_dir = "leetcode_problems"

# Create directory if not exists
os.makedirs(output_dir, exist_ok=True)

# Generate files
for filename in filenames:
    filepath = os.path.join(output_dir, filename)
    with open(filepath, "w", encoding="utf-8") as f:
        # Add a simple header inside each file
        f.write(f"# {filename.replace('_', ' ').replace('.py', '')}\n")
    print(f"Created: {filepath}")

print(f"\nâœ… Done! {len(filenames)} files created inside '{output_dir}' directory.")
